from collections import deque

def is_valid(state):
    m1, c1, boat, m2, c2 = state
    return (m1 >= 0 and m1 <= 3 and c1 >= 0 and c1 <= 3 and
            m2 >= 0 and m2 <= 3 and c2 >= 0 and c2 <= 3 and
            (m1 == 0 or m1 >= c1) and (m2 == 0 or m2 >= c2))

def successors(state):
    m1, c1, boat, m2, c2 = state
    moves = [(1,0),(2,0),(0,1),(0,2),(1,1)]
    next_states = []
    for m, c in moves:
        if boat == 1:
            new_state = (m1 - m, c1 - c, 0, m2 + m, c2 + c)
        else:
            new_state = (m1 + m, c1 + c, 1, m2 - m, c2 - c)
        if is_valid(new_state):
            next_states.append(new_state)
    return next_states

def solve_missionaries():
    start = (3, 3, 1, 0, 0)
    goal = (0, 0, 0, 3, 3)
    queue = deque([(start, [])])
    visited = set()
    while queue:
        state, path = queue.popleft()
        if state == goal:
            for step in path + [goal]:
                print(step)
            return
        if state not in visited:
            visited.add(state)
            for next_state in successors(state):
                queue.append((next_state, path + [state]))

solve_missionaries()
