# Map Coloring using Backtracking (CSP)

# Map: Neighbors for each region
neighbors = {
    'WA': ['NT', 'SA'],
    'NT': ['WA', 'SA', 'Q'],
    'SA': ['WA', 'NT', 'Q', 'NSW', 'V'],
    'Q': ['NT', 'SA', 'NSW'],
    'NSW': ['Q', 'SA', 'V'],
    'V': ['SA', 'NSW'],
    'T': []
}

colors = ['Red', 'Green', 'Blue']

# Function to check if assignment is valid
def is_valid(state, region, color):
    for neighbor in neighbors[region]:
        if neighbor in state and state[neighbor] == color:
            return False
    return True

# Backtracking algorithm
def backtrack(state):
    # If all regions are assigned
    if len(state) == len(neighbors):
        return state

    # Select an unassigned region
    unassigned = [r for r in neighbors if r not in state][0]

    for color in colors:
        if is_valid(state, unassigned, color):
            state[unassigned] = color
            result = backtrack(state)
            if result:
                return result
            del state[unassigned]  # Backtrack

    return None

# Start solving
solution = backtrack({})
print("Map Coloring Solution:")
for region in sorted(solution):
    print(f"{region}: {solution[region]}")
